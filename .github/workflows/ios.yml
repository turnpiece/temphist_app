name: iOS Build (Flutter)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-15
    env:
      IOS_BUNDLE_ID: com.turnpiece.temphist
      APPLE_TEAM_ID: 77X2NFV437

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v3

      - name: Ensure stable Xcode and install iPhoneOS SDK if missing
        shell: bash
        run: |
          set -eo pipefail

          echo "Current DEVELOPER_DIR: ${DEVELOPER_DIR:-<unset>}"

          need_switch=0
          if [[ "${DEVELOPER_DIR:-}" == *"Beta"* || "${DEVELOPER_DIR:-}" == *"Release_Candidate"* ]]; then
            echo "DEVELOPER_DIR points to Beta/RC; will switch."
            need_switch=1
          fi
          if [[ ! -d "${DEVELOPER_DIR:-}/Platforms/iPhoneOS.platform/Developer/SDKs" ]]; then
            echo "Current Xcode lacks iPhoneOS.platform SDK dir; will switch or install."
            need_switch=1
          fi

          if [[ $need_switch -eq 1 ]]; then
            echo "Searching for a stable Xcode with iPhoneOS SDK..."
            target=""
            for app in /Applications/Xcode*.app; do
              [[ -d "$app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs" ]] || continue
              [[ "$app" == *"Beta"* || "$app" == *"Release_Candidate"* ]] && continue
              target="$app"
              break
            done
            if [[ -n "$target" ]]; then
              echo "Switching to: $target"
              export DEVELOPER_DIR="$target/Contents/Developer"
              echo "DEVELOPER_DIR=$DEVELOPER_DIR" >> "$GITHUB_ENV"
              sudo xcode-select -s "$DEVELOPER_DIR"
            else
              echo "No stable Xcode with iPhoneOS SDK found; will use current and download the platform."
            fi
          fi

          # Some hosted images set this to an RC; unset to avoid confusion
          if [[ -n "${MD_APPLE_SDK_ROOT:-}" ]]; then
            unset MD_APPLE_SDK_ROOT
            echo "MD_APPLE_SDK_ROOT=" >> "$GITHUB_ENV"
          fi

          echo "Using Xcode:"
          xcodebuild -version
          echo "DEVELOPER_DIR=${DEVELOPER_DIR:-$(xcode-select -p)}"

          sdk_dir="${DEVELOPER_DIR:-$(xcode-select -p)}/Platforms/iPhoneOS.platform/Developer/SDKs"
          if ! ls "$sdk_dir"/iPhoneOS*.sdk >/dev/null 2>&1; then
            echo "No iPhoneOS SDKs present in $sdk_dir ‚Äî downloading iOS platform‚Ä¶"
            sudo xcodebuild -license accept || true
            sudo xcodebuild -downloadPlatform iOS
          fi

          echo "Installed iPhoneOS SDKs:"
          ls -1 "$sdk_dir" || true
          echo "iphoneos sdk version:"
          xcrun --sdk iphoneos --show-sdk-version

      - name: Update version for release
        run: |
          # Check if this is a tag push or branch push
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # This is a tag push - extract version and update
            VERSION=${GITHUB_REF#refs/tags/}
            RELEASE_DATE=$(date +'%Y-%m-%d')
            echo "Tag detected: $VERSION"
            echo "Setting release date to: $RELEASE_DATE"
            
            # Update version in all config files
            sed -i '' "s/appVersion = '.*'/appVersion = '${VERSION#v}'/" lib/config/*.dart
            
            # Update release date in all config files  
            sed -i '' "s/releaseDate = '.*'/releaseDate = '$RELEASE_DATE'/" lib/config/*.dart
            
            echo "Version and release date update complete"
          else
            # This is a branch push - just log and continue
            echo "Branch push detected: $GITHUB_REF"
            echo "No version update needed for branch push"
            echo "Version will be updated when a tag is pushed"
          fi

      - name: üöÄ Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.32.8"
          channel: "stable"

      - name: üîç Check Flutter and Dart versions
        run: |
          flutter --version
          dart --version

      - name: üì¶ Install dependencies
        run: flutter pub get

      - name: üß™ Run tests
        run: flutter test

      - name: üîê Decode GoogleService-Info.plist
        run: |
          echo "${{ secrets.GOOGLE_SERVICE_INFO_PLIST_B64 }}" | base64 --decode > ios/Runner/GoogleService-Info.plist

      - name: Clear match cache
        run: rm -rf ~/Library/MobileDevice/Provisioning\ Profiles/*

      - name: Remove old match repo
        run: rm -rf /Users/runner/.fastlane/ci/*

      - name: Clean DerivedData
        run: rm -rf ~/Library/Developer/Xcode/DerivedData

      - name: Clean keychains
        run: |
          security delete-keychain /Users/runner/Library/Keychains/fastlane_tmp_keychain-db || true
          rm -rf /Users/runner/Library/Keychains/fastlane_tmp_keychain-db

      - name: Create keychain
        run: |
          security create-keychain -p "" /Users/runner/Library/Keychains/fastlane_tmp_keychain-db
          security set-keychain-settings -t 3600 -l /Users/runner/Library/Keychains/fastlane_tmp_keychain-db
          security list-keychains -d user -s /Users/runner/Library/Keychains/fastlane_tmp_keychain-db

      - name: üõ†Ô∏è Install Fastlane
        working-directory: ios
        run: bundle install

      - name: üì¶ Clean and Install CocoaPods dependencies
        working-directory: ios
        run: |
          rm -rf Pods
          rm -f Podfile.lock
          bundle exec pod install

      - name: üîç List available iOS simulators
        run: xcrun simctl list devices available

      - name: üöÄ Upload to TestFlight with Fastlane
        working-directory: ios
        run: bundle exec fastlane beta --verbose
        env:
          FLUTTER_BUILD_MODE: release
          APP_STORE_KEY_ID: ${{ secrets.APP_STORE_KEY_ID }}
          APP_STORE_ISSUER_ID: ${{ secrets.APP_STORE_ISSUER_ID }}
          APP_STORE_PRIVATE_KEY: ${{ secrets.APP_STORE_PRIVATE_KEY }}
          APP_IDENTIFIER: ${{ secrets.APP_IDENTIFIER }}
          APP_STORE_TEAM_ID: ${{ secrets.APP_STORE_TEAM_ID }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: https://x-access-token:${{ secrets.MATCH_GIT_PAT }}@github.com/turnpiece/apple-certs.git
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          FASTLANE_DISABLE_COLORS: 1

      - name: Upload Xcode logs and SDK layout
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-logs-and-sdk
          path: |
            ~/Library/Logs/gym
            ~/Library/Developer/Xcode/DerivedData/**/Logs
            $DEVELOPER_DIR/Platforms/iPhoneOS.platform/Developer/SDKs

      - name: ‚úÖ Archive output
        run: |
          mkdir -p build-artifacts
          IPA_PATH=$(find ios -name "*.ipa" | head -n 1)
          echo "Found IPA at: $IPA_PATH"
          cp "$IPA_PATH" build-artifacts/

      - name: üíæ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app
          path: build-artifacts
